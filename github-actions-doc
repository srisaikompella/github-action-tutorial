Github actions:

Fully integrated with github
Respond to any github event (say push, pull req etc)
It has great community support. Backed by community-powered workflows
Works on any platform (linux, windows, macOs)
Supports Matrix builds(write job once and then having the same ops and tasks executed n times based on the params you pass to matrix. )
Built in secret store.

- git actions is comprised by 3 main parts. 1) events 2) workflows 3) actions

- You have a repo in github and workflows are associated with it.This is the first thing we setup as a part of automation proces with github actions. The workflow includes one or more jobs.
  Jobs then contain one or more steps that will be executed in the order they're specified. You assign so called events or triggers to the wokflows because you don't want them to be exec all the time.

- event initiate or trigger an execution of workflow. defines when an workflow can be triggered.
- workflow is basically the structure or orchestration of all the tasks and ops that your workflow does. Here you specify the actions which are nothing but the individual tasks/ops that you use to achieve whatever your goal is.

- You can define on which event the workflow can be triggered using the On clause.

  3 types of events: 1) github triggered 2) scheduled 3) manually triggered -> workflow_dispatch
  Below is the example of scheduled event.
  on:
  schedule: 
  - cron: 0 12 * * 1 

- Workflows are like pipelines. It uses yaml syntax. All yaml files must be present in .github/workflows. It glues together existing actions in seq. 
  Always the events have to put first in the workflow.

- Jobs run in parallel by default but they can be configured to run seq so that the dependant job waits until the completion of job that it depends on.
  We can use conditions to avoid them running all the time.

Example of matrix builds:

# The below example implements matrix build. The below job runs 9 times. 
# 3 times for macos-latest -> macos-latest -> 8.x
#                             macos-latest -> 10.x
#                             macos-latest -> 12 .x
# 3 times for windows and 3 times for ubuntu

name: Node CI
on:                            # events
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on:  ${{ matrix.os }} # A pipeline can have mutliple jobs, for each job must have runs-on. Github engine needs to know where to run your job.
    strategy: 
      matrix:
        node-version: [8.x, 10.x, 12.x]
        os: [macos-latest, windows-latest, ubuntu-18.04]
    steps:
    - name: Use node.js ${{ matrix.node-version }}   # pre-existing actions that someone built
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}  # shell scripts
    - name: Test Job
      run: |
        echo "Hi"

Example-1: workflow_dispatch example
link: [ https://dev.to/mrmike/github-action-handling-input-default-value-5f2g ]


Example-2: First workflow
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo $GITHUB_WORKSPACE
          ls ./
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: test artifacts

          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: k8s-manifests
  deploy: 
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Unarchive
        uses: actions/download-artifact@v4
        with: 
          name: test artifacts
          path: kashi
      - name: Check artifact status
        run: pwd && ls -l ./ && cd ../ && ls -l && echo $HOME && cd ../ && ls -l ./

GITHUB_WORKSPACE -> prints the github workspace .. (path where our workflow is running ....)
toJSON(github)
toJSON(env)


Github Custom Actions:
----------------------

Why custom actions?

Multiple steps can be grouped into a single custom action.
Instead of writing complex step definitions, you can build and use a single custom action. (simplify various steps you have in your workflows)
No existing public workflow action:: existing public actions might not solve the problem you have in your workflow in the way you them to solve. Hence you want to build a custom action because you have more control over how it solves a specific problem. It contains your own logic.

Custom actions are of 3 types:
1) Docker 2) Javascript 3) Composite

Javascript: logic is written in Javascript. This Javascript file will be executed whenever your actions runs. 
Docker: Create a dockerfile with your required config. Perform any tasks of your choice with any language.
Composite: The idea behind this action is you don't write any code with any programming language but instead you combine multiple workflow steps into one single action. combine run and uses actions in single action. 
We can create a brand new repo for action and if it is a public repo, that could be used by any other workflow in any other repo as an action. your actions could live in their own repos and you can use them straight from there. But you can add actions to projects you already have so that they're then only available in those projects. If you add actions to the existing project then they will be used by only that specific project meaning by workflows that are part of this project not any other workflows. If your intention is to make this action usable by any workflow from other repos, you must create the actions as standalone repos.

NOTE: if your actions resides in the same repository as your workflows, then checkout code must be executed first and cannot be part of the action itself. because we must checkout the project code,  before we can use the action defined.


the below link explains the difference between resuable workflows and composite actions.
1) Nesting: can't chain reusable workflows( cannot call another reusable workflow ). composite actions can be chained. we can have a composite actions with another composite actions as one of its steps.
2) Conditions: we can use if conditions in reusable case and can't in composite actions.
3) Secrets: we can consume secrets in resuable case and can't use secrets in composite.
Above second and 3 rd point are wrong points and misleading ....
wheerlaw easily explaiend the differences. See the link below...

4) storage: we can store the reusbale in .github/workflows dir, where composite can be stored in brand new repos.
5) Jobs: composite actions consits of flat list of steps hence you cannot have multiple jobs in single composite action. It doesn;t specify a 'job' keyword. but uses run instead. the story is diff for reusable workflow. you can have many jobs in a single workflow.

6) logging: With Reusable Workflows you have a very rich log of what is happening, and every single job and step is logged independently in real time .This is not the case, however, with Composite Actions. As we have just seen, Composite Actions are a way to group multiple steps in one… this also means that when executing that step you don’t have visibility on all of the parts.

Outdated differences::
https://dev.to/n3wt0n/composite-actions-vs-reusable-workflows-what-is-the-difference-github-actions-11kd ( Conditionals are supported by custom actions.) read the comment section thoroughly.

wheerlaws repos to understand the secrets case:: 
https://github.com/wheelerlaw/test-action/blob/6c299b9921cc81afbf57ddb00c78dd0f89a995f7/action.yaml
https://github.com/wheelerlaw/test-workflow/blob/54f040445facb60e3e403a1f720693f55cf4309a/.github/workflows/CI.yaml#L24

Updated differences::
https://dev.to/n3wt0n/github-composite-actions-vs-reusable-workflows-updated-2023-bl8

When you are executing a shell command using run module in github action you need to specify type of shell in composite action
